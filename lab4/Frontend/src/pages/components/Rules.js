const Rules = () => {
    return (
        <div>
            <p>
                <a className="list" href="https://se.ifmo.ru/courses/web#labs" target="_blank">
                    <b>☞Курс веб-программирования☚</b>
                </a> 
                <br />
                
                <a className="list" href="https://www.youtube.com/watch?v=J78e_88FTvg&amp;list=PLBWafxh1dFuzOL-NPuOSmo5HLhboAAOWV" target="_blank">
                    <b>☞Плейлист лекций☚</b>
                </a>
            </p>
                
            <p> Условие: </p>
            
            <p>
                <b> Переписать приложение из предыдущей лабораторной работы с использованием следующих технологий: </b> <br />
                1. Уровень back-end должен быть основан на Java EE (необходимо использовать EJB). <br />
                2. Уровень front-end должен быть построен на React + Redux (необходимо использовать ES6 и JSX) с использованием набора компонентов React Toolbox <br />
                3. Взаимодействие между уровнями back-end и front-end должно быть организовано посредством REST API.
            </p>
                
            <p>
                <b> Приложение по-прежнему должно включать в себя 2 страницы - стартовую и основную страницу приложения. Обе страницы приложения должны быть адаптированы для отображения в 3 режимах: </b> <br />
                1. "Десктопный" - для устройств, ширина экрана которых равна или превышает 1116 пикселей. <br />
                2. "Планшетный" - для устройств, ширина экрана которых равна или превышает 751, но меньше 1116 пикселей. <br />
                3. "Мобильный"- для устройств, ширина экрана которых меньше 751 пикселей.
            </p>
                
            <p> 
                <b> Стартовая страница должна содержать следующие элементы: </b> <br />
                1. "Шапку", содержащую ФИО студента, номер группы и номер варианта. <br />
                2. Форму для ввода логина и пароля. Информация о зарегистрированных в системе пользователях должна храниться в отдельной таблице БД (пароль должен храниться в виде хэш-суммы). Доступ неавторизованных пользователей к основной странице приложения должен быть запрещён. <br />
            </p>
                
            <p>
                <b> Основная страница приложения должна содержать следующие элементы: </b> <br />
                1. Набор полей ввода для задания координат точки и радиуса области в соответствии с вариантом задания. Если поле ввода допускает ввод заведомо некорректных данных (таких, например, как буквы в координатах точки или отрицательный радиус), то приложение должно осуществлять их валидацию. <br />
                2. Динамически обновляемую картинку, изображающую область на координатной плоскости в соответствии с номером варианта и точки, координаты которых были заданы пользователем. Клик по картинке должен инициировать сценарий, осуществляющий определение координат новой точки и отправку их на сервер для проверки её попадания в область. Цвет точек должен зависить от факта попадания / непопадания в область. Смена радиуса также должна инициировать перерисовку картинки. <br />
                3. Таблицу со списком результатов предыдущих проверок. <br />
                4. Кнопку, по которой аутентифицированный пользователь может закрыть свою сессию и вернуться на стартовую страницу приложения. <br />
            </p>

            <p> 
                <b> Дополнительные требования к приложению: </b> <br />
                1. Все результаты проверки должны сохраняться в базе данных под управлением СУБД Oracle. <br />
                2. Для доступа к БД необходимо использовать JPA. <br />
            </p>
        </div>
        
    );
}

export default Rules;