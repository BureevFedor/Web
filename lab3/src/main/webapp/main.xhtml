<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:p="http://primefaces.org/ui"
	xmlns:a="http://xmlns.jcp.org/jsf/passthrough">

	<h:head>
		<title>3ЛР Веб-Программирование</title>
		<link rel="icon" href="#{resource['images/frog.png']}" target="head"/>
		<h:outputStylesheet library="css" name="styles.css"/>
	</h:head>

	<h:body>
		<header>
			<div class="header">            
				<h1 class="header">ЛАБОРАТОРНАЯ РАБОТА 3</h1>
				<div>
					<p class="header2">
						Буреев Фёдор P3207 333975 вар. 17233
					</p>
				</div>
			</div>
		</header>

		<h:form id="hiddenForm" style="display: none">
			<h:inputText id="graphEntries" name="graphEntries" readonly="true" value="#{entries.graphEntries}" /> 
		</h:form>

		<h:form id="inputForm">
			<div class="wrapper">
				<div class="grid">
						
					<div class="canvas">
						<canvas id="graphic" height="500" width="500"></canvas>
					</div>
						
					<div class="container">
						<div class="pad_bot">
							<img src="resources/images/duck-girl.gif" class="image_b" alt="" />

							<div>
								X=<h:outputText id="currX" value="#{entries.currX}" /> &emsp;
								Y=<h:outputText id="currY" value="#{entries.currY}" /> &emsp;
								R=<h:outputText id="currR" value="#{entries.currR}" /> &emsp;
								<button type="submit" id="fake_button" hidden="hidden"></button>
								<script>
									// Prevent form submission on button click
									document
										.getElementById("fake_button")
										.addEventListener("click", function (event) {
											event.preventDefault();
											//document.getElementById('inputForm:submit-button').click();
										});
								</script>
							</div>
												
							<div class="custom">
								<label for="x_coords">
									<b>X : </b>
								</label>
								<h:commandButton name="x" id="X1" value="-4" action="#{entries.setCurrX(-4.0)}" update="inputForm:currX"/>
								<h:commandButton name="x" id="X2" value="-3" action="#{entries.setCurrX(-3.0)}" update="inputForm:currX" />
								<h:commandButton name="x" id="X3" value="-2" action="#{entries.setCurrX(-2.0)}" update="inputForm:currX"/>
								<h:commandButton name="x" id="X4" value="-1" action="#{entries.setCurrX(-1.0)}" update="inputForm:currX"/>
								<h:commandButton name="x" id="X5" value="0" action="#{entries.setCurrX(0.0)}" update="inputForm:currX"/>
								<h:commandButton name="x" id="X6" value="1" action="#{entries.setCurrX(1.0)}" update="inputForm:currX"/>
								<h:commandButton name="x" id="X7" value="2" action="#{entries.setCurrX(2.0)}" update="inputForm:currX"/>
								<h:commandButton name="x" id="X8" value="3" action="#{entries.setCurrX(3.0)}" update="inputForm:currX"/>
								<h:commandButton name="x" id="X9" value="4" action="#{entries.setCurrX(4.0)}" update="inputForm:currX"/>

								<h:inputHidden name = "hiddenx" id="X" value="#{entries.currX}" /> 
							</div>
													
							<div class="custom">
								<label for="y_coords"><b>Y : </b></label>

								<h:inputText name="y" maxlength="5" id="Y" placeholder="от -3 до 3" value="#{entries.currY}"
									required="true" requiredMessage="Y должно быть от -3 до 3"
									validatorMessage="Y должно быть от -3 до 3"
									converterMessage="Y должно быть от -3 до 3"
									immediate="true">
									<f:validateDoubleRange minimum="-3.0" maximum="3.0" />
									<f:ajax execute="@this" event="keyup" render="message" />

								</h:inputText>
							</div>
													
							<div class="custom">
								<label for="r_coords">
									<b>R : </b>
								</label>
								<h:commandButton name="r" id="R1" value="1" action="#{entries.setCurrR(1.0)}" update="inputForm:currR"/>
								<h:commandButton name="r" id="R2" value="1.5" action="#{entries.setCurrR(1.5)}" update="inputForm:currR"/>
								<h:commandButton name="r" id="R3" value="2" action="#{entries.setCurrR(2.0)}" update="inputForm:currR"/>
								<h:commandButton name="r" id="R4" value="2.5" action="#{entries.setCurrR(2.5)}" update="inputForm:currR"/>
								<h:commandButton name="r" id="R5" value="3" action="#{entries.setCurrR(3.0)}" update="inputForm:currR"/>
								<h:inputHidden name="r" id="R" value="#{entries.currR}"> 
								</h:inputHidden>
							</div>

							<div>
								<h:message id="messageY" for="Y" style="color: #ff0000;"/>
								<p:messages id="messagesP" autoUpdate="true" globalOnly="true" showDetail="false" />
							</div>

							<div>
								<p:commandButton id="submit-button" type="submit" value="Проверка правильности" styleclass="button"
									action="#{entries.addCurr()}"
									update="tableForm:tableData hiddenForm:graphEntries inputForm:currX inputForm:currY inputForm:currR inputForm:messageY inputForm:messagesP"
									oncomplete="redraw();"/>
							</div>

							<div>
								<p:commandButton id="reset-button" type="submit" value="Сброс таблицы" styleclass="button"
									action="#{entries.clear()}"
									update="inputForm:X inputForm:Y inputForm:R inputForm:currX inputForm:currY inputForm:currR tableForm:tableData hiddenForm:graphEntries"
									oncomplete="setR(); redraw();"/>
							</div>

							<div>
								<p:commandButton action="index" value="Перейти на стартовую страницу" styleclass="button"/>
							</div>
							
						</div>
					</div>
						
					<div class="container">
						<h:form id="tableForm">
							<p:dataTable id="tableData" value="#{entries.entries}" var="entry" tableStyleClass="main_table" scrollable="true" scrollHeight="600" resizableColumns="true" emptyMessage="Нет значений">
								
								<p:column width="10">    				
									<f:facet name="header">X</f:facet>    				
									#{entry.x}
								</p:column>

								<p:column width="10">    				
									<f:facet name="header">Y</f:facet>    				
									#{entry.y}
								</p:column>

								<p:column width="10">    				
									<f:facet name="header">R</f:facet>    				
									#{entry.r}
								</p:column>

								<p:column width="50">   				
									<f:facet name="header">Время</f:facet>    				
									#{entry.attemptTime}
								</p:column>

								<p:column width="10">    				
									<f:facet name="header">Результат</f:facet>    				
									#{entry.result}
								</p:column>
								
							</p:dataTable>
						</h:form>
					</div>
				</div>
			</div>
		</h:form>
			
		<p>
			<a class="list" href="https://se.ifmo.ru/courses/web#labs" target="_blank">
				<b>☞Курс веб-программирования☚</b>
			</a> 
			
			<br />
			<a class="list" href="https://www.youtube.com/watch?v=J78e_88FTvg&amp;list=PLBWafxh1dFuzOL-NPuOSmo5HLhboAAOWV" target="_blank"><b>☞Плейлист лекций☚</b></a></p>
			
		<p> Условие: </p>
		<p>
			<b>
				Разработать приложение на базе JavaServer Faces Framework, которое осуществляет проверку попадания точки в заданную область на координатной плоскости. <br />
				Приложение должно включать в себя 2 facelets-шаблона - стартовую страницу и основную страницу приложения, а также набор управляемых бинов (managed beans), реализующих логику на стороне сервера.   <br />
			</b>
		</p>
			
		<p> 
			<b> Стартовая страница должна содержать следующие элементы: </b> <br />
			1. "Шапку", содержащую ФИО студента, номер группы и номер варианта. <br />
			2. Интерактивные часы, показывающие текущие дату и время, обновляющиеся раз в 11 секунд. <br />
			3. Ссылку, позволяющую перейти на основную страницу приложения. <br />
		</p>
			
		<p>
			<b> Основная страница приложения должна содержать следующие элементы: </b> <br />
			1. Набор компонентов для задания координат точки и радиуса области в соответствии с вариантом задания. Может потребоваться использование дополнительных библиотек компонентов - ICEfaces (префикс "ace") и PrimeFaces (префикс "p"). Если компонент допускает ввод заведомо некорректных данных (таких, например, как буквы в координатах точки или отрицательный радиус), то приложение должно осуществлять их валидацию. <br />
			2. Динамически обновляемую картинку, изображающую область на координатной плоскости в соответствии с номером варианта и точки, координаты которых были заданы пользователем. Клик по картинке должен инициировать сценарий, осуществляющий определение координат новой точки и отправку их на сервер для проверки её попадания в область. Цвет точек должен зависить от факта попадания / непопадания в область. Смена радиуса также должна инициировать перерисовку картинки. <br />
			3. Таблицу со списком результатов предыдущих проверок. <br />
			4. Ссылку, позволяющую вернуться на стартовую страницу. <br />
		</p>

		<p> 
			<b> Дополнительные требования к приложению: </b> <br />
			1. Все результаты проверки должны сохраняться в базе данных под управлением СУБД Oracle. <br />
			2. Для доступа к БД необходимо использовать ORM EclipseLink. <br />
			3. Для управления списком результатов должен использоваться Session-scoped Managed Bean. <br />
			4. Конфигурация управляемых бинов должна быть задана с помощью параметров в конфигурационном файле. <br />
			5. Правила навигации между страницами приложения должны быть заданы в отдельном конфигурационном файле. <br />
		</p>

		<h:outputScript library="js" name="jquery-3.5.1.min.js"/>
		<h:outputScript library="js" name="script.js"/>
	</h:body>
</html>